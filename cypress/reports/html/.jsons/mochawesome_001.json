{
  "stats": {
    "suites": 1,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-09T02:49:58.545Z",
    "end": "2025-05-09T02:50:06.609Z",
    "duration": 8064,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1489ab70-5d39-470b-b707-da9b393e0c88",
      "title": "",
      "fullFile": "cypress\\e2e\\API-testing\\petstore.cy.js",
      "file": "cypress\\e2e\\API-testing\\petstore.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
          "title": "Pet Store API Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - Retrieve store inventory",
              "fullTitle": "Pet Store API Tests GET - Retrieve store inventory",
              "timedOut": null,
              "duration": 2159,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: '/store/inventory'\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('object');\n  expect(Object.keys(response.body).length).to.be.greaterThan(0);\n  cy.log('Inventory Data:', response.body);\n});",
              "err": {},
              "uuid": "8010228b-44c5-4991-844d-717d4ad139a0",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Place an order for a pet",
              "fullTitle": "Pet Store API Tests POST - Place an order for a pet",
              "timedOut": null,
              "duration": 314,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const order = {\n  petId: petId,\n  quantity: 1,\n  shipDate: new Date().toISOString(),\n  status: \"placed\",\n  complete: true\n};\ncy.api({\n  method: 'POST',\n  url: '/store/order',\n  body: order\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id');\n  orderId = response.body.id;\n});",
              "err": {},
              "uuid": "79e8140b-a592-44c3-88e6-655eecdfb8d7",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Retrieve an order by ID",
              "fullTitle": "Pet Store API Tests GET - Retrieve an order by ID",
              "timedOut": null,
              "duration": 368,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wrap(orderId, {\n  timeout: 5000\n}).should('exist').then(id => {\n  cy.api({\n    method: 'GET',\n    url: `/store/order/${id}`,\n    failOnStatusCode: false\n  }).then(response => {\n    cy.log('Response Status:', response.status);\n    cy.log('Response Body:', JSON.stringify(response.body));\n    if (response.status === 200) {\n      expect(response.body).to.have.property('id', id);\n      expect(response.body).to.have.property('petId').and.to.be.a('number');\n      expect(response.body).to.have.property('status').and.to.be.a('string');\n    } else {\n      cy.log(`Unexpected status code: ${response.status}`);\n    }\n  });\n});",
              "err": {},
              "uuid": "4a3d7506-7621-442e-87e8-74cc482ffe91",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE - Remove an order by ID",
              "fullTitle": "Pet Store API Tests DELETE - Remove an order by ID",
              "timedOut": null,
              "duration": 309,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wrap(orderId).should('exist');\ncy.api({\n  method: 'DELETE',\n  url: `/store/order/${orderId}`,\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 404) {\n    cy.log('Order Not Found');\n  } else {\n    expect(response.status).to.eq(200);\n  }\n});",
              "err": {},
              "uuid": "456a0b9d-73e7-49f5-b5e8-f6dab4cbe946",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Create a user with username",
              "fullTitle": "Pet Store API Tests POST - Create a user with username",
              "timedOut": null,
              "duration": 296,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'POST',\n  url: '/user',\n  body: user\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "4a8b0c56-71bd-4efc-a81f-ee0e841c99b9",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Create a single user using /user endpoint",
              "fullTitle": "Pet Store API Tests POST - Create a single user using /user endpoint",
              "timedOut": null,
              "duration": 402,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 0,\n  username: \"string\",\n  firstName: \"string\",\n  lastName: \"string\",\n  email: \"string@example.com\",\n  password: \"string\",\n  phone: \"1234567890\",\n  userStatus: 0\n};\ncy.api({\n  method: 'POST',\n  url: '/user',\n  body: newUser\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('message');\n  cy.log('Single user creation response:', response.body);\n});",
              "err": {},
              "uuid": "edd2f67e-a60b-4d77-b754-038661a550d5",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Retrieve a user by username",
              "fullTitle": "Pet Store API Tests GET - Retrieve a user by username",
              "timedOut": null,
              "duration": 301,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `/user/${user.username}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('username', user.username);\n});",
              "err": {},
              "uuid": "70f89058-3889-4836-8820-80dd211004d9",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE - Remove a user by username",
              "fullTitle": "Pet Store API Tests DELETE - Remove a user by username",
              "timedOut": null,
              "duration": 536,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\API-testing\\\\petstore.cy.js\\\\Pet Store API Tests -- DELETE - Remove a user by username (failed).png\"\n    ],\n    [\n      \"\\\\API-testing\\\\petstore.cy.js\\\\Pet Store API Tests -- DELETE - Remove a user by username (failed) (attempt 2).png\"\n    ],\n    []\n  ]\n}",
              "code": "cy.api({\n  method: 'DELETE',\n  url: `/user/${user.username}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "a0fdc4b1-cd23-4f48-bffe-53ab2cce585b",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Login a user",
              "fullTitle": "Pet Store API Tests GET - Login a user",
              "timedOut": null,
              "duration": 360,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: `/user/login?username=${user.username}&password=${user.password}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('message');\n  cy.log('Login Response:', response.body);\n});",
              "err": {},
              "uuid": "ab80dc00-5e13-473c-ae81-985abc9e8b33",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Logout a user",
              "fullTitle": "Pet Store API Tests GET - Logout a user",
              "timedOut": null,
              "duration": 305,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.api({\n  method: 'GET',\n  url: '/user/logout'\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('message', 'ok');\n});",
              "err": {},
              "uuid": "5d583266-1541-4fd8-84b3-66324e08e4a4",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Create multiple users using an array",
              "fullTitle": "Pet Store API Tests POST - Create multiple users using an array",
              "timedOut": null,
              "duration": 381,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [{\n  id: 0,\n  username: \"string1\",\n  firstName: \"string1\",\n  lastName: \"string1\",\n  email: \"string1@example.com\",\n  password: \"password1\",\n  phone: \"1234567890\",\n  userStatus: 0\n}, {\n  id: 1,\n  username: \"string2\",\n  firstName: \"string2\",\n  lastName: \"string2\",\n  email: \"string2@example.com\",\n  password: \"password2\",\n  phone: \"9876543210\",\n  userStatus: 0\n}];\ncy.api({\n  method: 'POST',\n  url: '/user/createWithArray',\n  body: users\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('message', 'ok');\n});",
              "err": {},
              "uuid": "32635996-24a3-436a-9c95-28955a6345bb",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Create multiple users using a list",
              "fullTitle": "Pet Store API Tests POST - Create multiple users using a list",
              "timedOut": null,
              "duration": 311,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = [{\n  id: 0,\n  username: \"string1\",\n  firstName: \"string1\",\n  lastName: \"string1\",\n  email: \"string1@example.com\",\n  password: \"password1\",\n  phone: \"1234567890\",\n  userStatus: 0\n}, {\n  id: 1,\n  username: \"string2\",\n  firstName: \"string2\",\n  lastName: \"string2\",\n  email: \"string2@example.com\",\n  password: \"password2\",\n  phone: \"9876543210\",\n  userStatus: 0\n}];\ncy.api({\n  method: 'POST',\n  url: '/user/createWithList',\n  body: users\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('message', 'ok');\n});",
              "err": {},
              "uuid": "14b11f16-b4dc-40c9-9ad5-3d4b5e1d9e8f",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Update an existing pet",
              "fullTitle": "Pet Store API Tests PUT - Update an existing pet",
              "timedOut": null,
              "duration": 353,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wrap(petId).should('exist');\ncy.api({\n  method: 'PUT',\n  url: '/pet',\n  body: updatedPet\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('id', petId);\n  expect(response.body).to.have.property('name', updatedPet.name);\n  expect(response.body).to.have.property('status', updatedPet.status);\n});",
              "err": {},
              "uuid": "48d76bf3-1202-4bbf-bd2a-6051370479cb",
              "parentUUID": "b93dcd1e-cae5-41f3-aefd-e2670ae0dd00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8010228b-44c5-4991-844d-717d4ad139a0",
            "79e8140b-a592-44c3-88e6-655eecdfb8d7",
            "4a3d7506-7621-442e-87e8-74cc482ffe91",
            "456a0b9d-73e7-49f5-b5e8-f6dab4cbe946",
            "4a8b0c56-71bd-4efc-a81f-ee0e841c99b9",
            "edd2f67e-a60b-4d77-b754-038661a550d5",
            "70f89058-3889-4836-8820-80dd211004d9",
            "a0fdc4b1-cd23-4f48-bffe-53ab2cce585b",
            "ab80dc00-5e13-473c-ae81-985abc9e8b33",
            "5d583266-1541-4fd8-84b3-66324e08e4a4",
            "32635996-24a3-436a-9c95-28955a6345bb",
            "14b11f16-b4dc-40c9-9ad5-3d4b5e1d9e8f",
            "48d76bf3-1202-4bbf-bd2a-6051370479cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6395,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "reportPageTitle": "Regression testing",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "saveAllAttempts": false,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress\\reports\\html\\.jsons"
      },
      "version": "6.2.0"
    }
  }
}